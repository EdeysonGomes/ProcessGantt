'Implementa o algorítimo de escalonamento Round Robin, a partir da interface algoritmo
Public Class RoundRobin
    Inherits Algoritmo


    Public Sub New()
        Dim Atributo As New Atributo("Quantum", PrjProcessos.Atributo.TiposDeAtributos.taInteiro)
        Atributo.Valor = 4
        Me.atributos.Add(Atributo.Nome, Atributo)
    End Sub

    'Recebe uma lista de processo e devolve outra lista com a representação do fluxo destes processos na memória
    Public Overrides Function processar(ByVal Processos As Processos) As Processos
        'Cria uma lista padronizada para devolução dos processos conforme evolução na memória
        Dim Ret As New Processos
        'Prepara a fila de início com os processos a serem executados
        filaDeInicio.CopiarEmMemoria(Processos)
        'Ordena a fila de início conforme o instante de entrada em execução
        filaDeInicio.ordenar()
        'Reinicia o temporizador para o instante 0
        timerInterno.Reiniciar()
        'Assume que não há nenhum processo em execução
        Dim ProcessoEmExecucao As ProcessoEmMemoria = Nothing
        Dim QuantumRestante As Integer = 0
        'Enquanto houver algum processo para executar, na fila de pronto ou em execução...
        Do While filaDeInicio.Count > 0 Or filaPronto.Count > 0 Or Not IsNothing(ProcessoEmExecucao)
            'Se há algum processo para executar no instante atual
            While filaDeInicio.ProcessosPendentes(timerInterno.Instante)
                'Pega o processo pendente
                Dim NovoProcesso As ProcessoEmMemoria = filaDeInicio.ProximoProcesso
                'Coloca na fila de pronto
                filaPronto.Add(NovoProcesso)
                'E muda seu estado para Pronto
                NovoProcesso.Iniciar()
            End While
            'Se não há nenhum processo executando
            If IsNothing(ProcessoEmExecucao) Then
                'Coloca o próximo processo da fila de pronto em execução
                ProcessoEmExecucao = filaPronto.ProximoProcesso()
                'Se há um processo em execução
                If Not IsNothing(ProcessoEmExecucao) Then
                    'Muda seu estado e define o instante de entrada para execução
                    ProcessoEmExecucao.Executar(timerInterno.Instante)
                End If
                QuantumRestante = Me.atributos("Quantum").Valor
            Else
                QuantumRestante -= 1
                'Incrementa o timer
                timerInterno.Incrementar()
                'Gera para o processo uma interrupção do timer
                ProcessoEmExecucao.Temporizacao()
                'Verifica se o processo foi concluído
                If ProcessoEmExecucao.Estado = ProcessoEmMemoria.EstadoDoProcesso.epTerminado Then
                    'Coloca o processo na fila de retorno
                    With ProcessoEmExecucao
                        Ret.Add(New Processo(.id, .Inicio, timerInterno.Instante - .Inicio))
                    End With
                    'Ret.Add(ProcessoEmExecucao)
                    'Remove o processo concluído da memória
                    ProcessoEmExecucao = Nothing
                ElseIf QuantumRestante < 1 Then
                    With ProcessoEmExecucao
                        'Adiciona um novo ítem à saída
                        Ret.Add(New Processo(.id, .Inicio, timerInterno.Instante - .Inicio))
                    End With
                    'Devolve o processo em execução à fila de pronto
                    filaPronto.Add(ProcessoEmExecucao)
                    'Coloca o processo no estado Pronto
                    ProcessoEmExecucao.Iniciar()
                    'Remove o processo em execucao do processador
                    ProcessoEmExecucao = Nothing
                End If
            End If
        Loop
        'Devolve a lista de saída
        Return Ret
    End Function

End Class
